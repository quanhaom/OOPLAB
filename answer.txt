Question: Alternatively, to compare items in the cart, instead of using Comparator, we can use the Comparable interface and override the compareTo()method. You can refer to the Java docs to see the information of this interface. 
Suppose we are taking this Comparable interface approach.
-	What class should implement the Comparable interface?
-	In those classes, how should you implement the compareTo()method be to reflect the ordering that we want?
-	Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
-	Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?

1. What class should implement the Comparable interface?
The Media class should implement the Comparable interface. Since all items in the cart are media objects (or subclasses of Media), implementing Comparable in this class will allow us to define a natural ordering for all media types.



2. How should you implement the compareTo() method to reflect the ordering we want?
To implement the compareTo() method in the Media class, you would define a primary ordering and use secondary ordering rules for ties. For example, if the primary rule is "by title then cost," the implementation would look like this:

@Override
public int compareTo(Media other) {
    int titleComparison = this.title.compareTo(other.title);
    if (titleComparison != 0) {
        return titleComparison;
    }
    return Double.compare(other.cost, this.cost);
}
Alternatively, if the primary rule is "by cost then title," the implementation would look like this:

@Override
public int compareTo(Media other) {
    int costComparison = Double.compare(other.cost, this.cost);
    if (costComparison != 0) {
        return costComparison;
    }
    return this.title.compareTo(other.title);
}

3. Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
No, the Comparable interface allows only one natural ordering for a class, which is defined in the compareTo() method. To have multiple ordering rules, you would need to use the Comparator interface instead. With Comparator, you can define multiple comparison logic and pass the appropriate one at runtime.


4. Suppose the DVDs have a different ordering rule from the other media types (by title, then decreasing length, then cost). How would you modify your code to allow this?
To support different ordering rules for subclasses (e.g., DVDs), you can override the compareTo() method in the DVD subclass:

In the DVD class: Override the compareTo() method to reflect the new ordering rule. For instance:

@Override
public int compareTo(Media other) {
    if (other instanceof DVD) {
        DVD otherDVD = (DVD) other;
        int titleComparison = this.title.compareTo(otherDVD.title);
        if (titleComparison != 0) {
            return titleComparison;
        }
        int lengthComparison = Integer.compare(otherDVD.length, this.length);
        if (lengthComparison != 0) {
            return lengthComparison;
        }
        return Double.compare(otherDVD.cost, this.cost);
    }
    return super.compareTo(other);
}
In the Media class: Keep the general compareTo() logic for non-DVD media types.

@Override
public int compareTo(Media other) {
    int titleComparison = this.title.compareTo(other.title);
    if (titleComparison != 0) {
        return titleComparison;
    }
    return Double.compare(other.cost, this.cost);
}
This approach ensures that DVDs have their specific ordering rules while other media types adhere to the default rules defined in the Media class.



