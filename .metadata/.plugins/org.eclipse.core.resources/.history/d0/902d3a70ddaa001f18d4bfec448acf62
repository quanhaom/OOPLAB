package frame;

import javax.swing.*;
import java.awt.*;
import java.util.Timer;
import java.util.TimerTask;

public class PlaybackDialog {
    private JDialog dialog;
    private JLabel trackLabel;
    private JProgressBar progressBar;
    private JLabel timeLabel;

    private Timer timer;
    private int elapsedTime; // In seconds
    private final int totalTime; // In seconds

    public PlaybackDialog(String trackName, int totalTimeInSeconds) {
        this.totalTime = (Integer) totalTimeInSeconds;

        dialog = new JDialog();
        dialog.setTitle("Playing: " + trackName);
        dialog.setSize(400, 150);
        dialog.setLayout(new BorderLayout());
        dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        dialog.setLocationRelativeTo(null);

        // Add components
        trackLabel = new JLabel("Track: " + trackName, SwingConstants.CENTER);
        trackLabel.setFont(new Font("Arial", Font.BOLD, 16));
        dialog.add(trackLabel, BorderLayout.NORTH);

        progressBar = new JProgressBar(0, totalTimeInSeconds);
        progressBar.setStringPainted(true);
        dialog.add(progressBar, BorderLayout.CENTER);

        timeLabel = new JLabel("0:00 -----------||----------- " + formatTime(totalTimeInSeconds), SwingConstants.CENTER);
        dialog.add(timeLabel, BorderLayout.SOUTH);

        dialog.setVisible(true);

        startTimer();
    }

    private void startTimer() {
        timer = new Timer();
        elapsedTime = 0;

        timer.scheduleAtFixedRate(new TimerTask() {
            @Override
            public void run() {
                if (elapsedTime >= totalTime) {
                    timer.cancel();
                    SwingUtilities.invokeLater(() -> {
                        JOptionPane.showMessageDialog(dialog, "Playback complete!", "Info", JOptionPane.INFORMATION_MESSAGE);
                        dialog.dispose();
                    });
                } else {
                    elapsedTime += 10;
                    SwingUtilities.invokeLater(() -> updateProgress());
                }
            }
        }, 0, 100); 
    }

    private void updateProgress() {
        progressBar.setValue(elapsedTime);
        timeLabel.setText(formatTime(elapsedTime) + " -----------||----------- " + formatTime(totalTime));
    }

    private String formatTime(int seconds) {
        int minutes = seconds / 60;
        int remainingSeconds = seconds % 60;
        return String.format("%d:%02d", minutes, remainingSeconds);
    }
}
